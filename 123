bringz='git pull'
chicken='git add'
chuck='fortune -a /Users/real/.local/share/sheldon/repos/github.com/ohmyzsh/ohmyzsh/plugins/chucknorris/fortunes'
g=git
ga='git add'
gaa='git add --all'
gam='git am'
gama='git am --abort'
gamc='git am --continue'
gams='git am --skip'
gamscp='git am --show-current-patch'
gap='git apply'
gapa='git add --patch'
gapt='git apply --3way'
gau='git add --update'
gav='git add --verbose'
gb='git branch'
gbD='git branch --delete --force'
gba='git branch --all'
gbd='git branch --delete'
gbg='LANG=C git branch -vv | grep ": gone\]"'
gbgD='LANG=C git branch --no-color -vv | grep ": gone\]" | cut -c 3- | awk '\''{print $1}'\'' | xargs git branch -D'
gbgd='LANG=C git branch --no-color -vv | grep ": gone\]" | cut -c 3- | awk '\''{print $1}'\'' | xargs git branch -d'
gbl='git blame -w'
gbm='git branch --move'
gbnm='git branch --no-merged'
gbr='git branch --remote'
gbs='git bisect'
gbsb='git bisect bad'
gbsg='git bisect good'
gbsn='git bisect new'
gbso='git bisect old'
gbsr='git bisect reset'
gbss='git bisect start'
gc='git commit --verbose'
'gc!'='git commit --verbose --amend'
gcB='git checkout -B'
gca='git commit --verbose --all'
'gca!'='git commit --verbose --all --amend'
gcam='git commit --all --message'
'gcan!'='git commit --verbose --all --no-edit --amend'
'gcann!'='git commit --verbose --all --date=now --no-edit --amend'
'gcans!'='git commit --verbose --all --signoff --no-edit --amend'
gcas='git commit --all --signoff'
gcasm='git commit --all --signoff --message'
gcb='git checkout -b'
gcd='git checkout $(git config gitflow.branch.develop)'
gcf='git config --list'
gch='git checkout $(git config gitflow.prefix.hotfix)'
gcl='git clone --recurse-submodules'
gclean='git clean --interactive -d'
gclf='git clone --recursive --shallow-submodules --filter=blob:none --also-filter-submodules'
gcm='git checkout $(git_main_branch)'
gcmsg='git commit --message'
gcn='git commit --verbose --no-edit'
'gcn!'='git commit --verbose --no-edit --amend'
gco='git checkout'
gcor='git checkout --recurse-submodules'
gcount='git shortlog --summary --numbered'
gcp='git cherry-pick'
gcpa='git cherry-pick --abort'
gcpc='git cherry-pick --continue'
gcr='git checkout $(git config gitflow.prefix.release)'
gcs='git commit --gpg-sign'
gcsm='git commit --signoff --message'
gcss='git commit --gpg-sign --signoff'
gcssm='git commit --gpg-sign --signoff --message'
gd='git diff'
gdca='git diff --cached'
gdct='git describe --tags $(git rev-list --tags --max-count=1)'
gdcw='git diff --cached --word-diff'
gdn='git diff --name-only'
gds='git diff --staged'
gdt='git diff-tree --no-commit-id --name-only -r'
gdup='git diff @{upstream}'
gdw='git diff --word-diff'
gf='git fetch'
gfa='git fetch --all --tags --prune --jobs=10'
gfg='git ls-files | grep'
gfl='git flow'
gflf='git flow feature'
gflff='git flow feature finish'
gflffc='git flow feature finish ${$(git_current_branch)#feature/}'
gflfp='git flow feature publish'
gflfpc='git flow feature publish ${$(git_current_branch)#feature/}'
gflfpll='git flow feature pull'
gflfs='git flow feature start'
gflh='git flow hotfix'
gflhf='git flow hotfix finish'
gflhfc='git flow hotfix finish ${$(git_current_branch)#hotfix/}'
gflhp='git flow hotfix publish'
gflhpc='git flow hotfix publish ${$(git_current_branch)#hotfix/}'
gflhs='git flow hotfix start'
gfli='git flow init'
gflr='git flow release'
gflrf='git flow release finish'
gflrfc='git flow release finish ${$(git_current_branch)#release/}'
gflrp='git flow release publish'
gflrpc='git flow release publish ${$(git_current_branch)#release/}'
gflrs='git flow release start'
gfo='git fetch origin'
gg='git gui citool'
gga='git gui citool --amend'
ggpull='git pull origin "$(git_current_branch)"'
ggpush='git push origin "$(git_current_branch)"'
ggsup='git branch --set-upstream-to=origin/$(git_current_branch)'
ghf='git hf'
ghff='git hf feature'
ghfh='git hf hotfix'
ghfr='git hf release'
ghfs='git hf support'
ghfu='git hf update'
ghh='git help'
gignore='git update-index --assume-unchanged'
gignored='git ls-files -v | grep "^[[:lower:]]"'
git-svn-dcommit-push='git svn dcommit && git push github $(git_main_branch):svntrunk'
github='web_search github'
gk='\gitk --all --branches &!'
gke='\gitk --all $(git log --walk-reflogs --pretty=%h) &!'
gl='git pull'
glfsi='git lfs install'
glfsls='git lfs ls-files'
glfsmi='git lfs migrate import --include='
glfst='git lfs track'
glg='git log --stat'
glgg='git log --graph'
glgga='git log --graph --decorate --all'
glgm='git log --graph --max-count=10'
glgp='git log --stat --patch'
gln='git log --name-only'
glo='git log --oneline --decorate'
glod='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset"'
glods='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset" --date=short'
glog='git log --oneline --decorate --graph'
gloga='git log --oneline --decorate --graph --all'
glol='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset"'
glola='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" --all'
glols='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" --stat'
glp=_git_log_prettily
gluc='git pull upstream $(git_current_branch)'
glum='git pull upstream $(git_main_branch)'
gm='git merge'
gma='git merge --abort'
gmc='git merge --continue'
gmff='git merge --ff-only'
gmom='git merge origin/$(git_main_branch)'
gms='git merge --squash'
gmtl='git mergetool --no-prompt'
gmtlvim='git mergetool --no-prompt --tool=vimdiff'
gmum='git merge upstream/$(git_main_branch)'
gp='git push'
gpd='git push --dry-run'
gpf='git push --force-with-lease --force-if-includes'
'gpf!'='git push --force'
gpoat='git push origin --all && git push origin --tags'
gpod='git push origin --delete'
gpr='git pull --rebase'
gpra='git pull --rebase --autostash'
gprav='git pull --rebase --autostash -v'
gpristine='git reset --hard && git clean --force -dfx'
gprom='git pull --rebase origin $(git_main_branch)'
gpromi='git pull --rebase=interactive origin $(git_main_branch)'
gprum='git pull --rebase upstream $(git_main_branch)'
gprumi='git pull --rebase=interactive upstream $(git_main_branch)'
gprv='git pull --rebase -v'
gpsup='git push --set-upstream origin $(git_current_branch)'
gpsupf='git push --set-upstream origin $(git_current_branch) --force-with-lease --force-if-includes'
gpu='git push upstream'
gpv='git push --verbose'
gr='git remote'
gra='git remote add'
grb='git rebase'
grba='git rebase --abort'
grbc='git rebase --continue'
grbd='git rebase $(git_develop_branch)'
grbi='git rebase --interactive'
grbm='git rebase $(git_main_branch)'
grbo='git rebase --onto'
grbom='git rebase origin/$(git_main_branch)'
grbs='git rebase --skip'
grbum='git rebase upstream/$(git_main_branch)'
grev='git revert'
greva='git revert --abort'
grevc='git revert --continue'
grf='git reflog'
grh='git reset'
grhh='git reset --hard'
grhk='git reset --keep'
grhs='git reset --soft'
grm='git rm'
grmc='git rm --cached'
grmv='git remote rename'
groh='git reset origin/$(git_current_branch) --hard'
grrm='git remote remove'
grs='git restore'
grset='git remote set-url'
grss='git restore --source'
grst='git restore --staged'
grt='cd "$(git rev-parse --show-toplevel || echo .)"'
gru='git reset --'
grup='git remote update'
grv='git remote --verbose'
gs='git status'
gsb='git status --short --branch'
gsd='git svn dcommit'
gsh='git show'
gsi='git submodule init'
gsps='git show --pretty=short --show-signature'
gsr='git svn rebase'
gss='git status --short'
gst='git status'
gsta='git stash push'
gstaa='git stash apply'
gstall='git stash --all'
gstc='git stash clear'
gstd='git stash drop'
gstl='git stash list'
gstp='git stash pop'
gsts='git stash show --patch'
gsu='git submodule update'
gsw='git switch'
gswc='git switch --create'
gswd='git switch $(git_develop_branch)'
gswm='git switch $(git_main_branch)'
gta='git tag --annotate'
gtl='gtl(){ git tag --sort=-v:refname -n --list "${1}*" }; noglob gtl'
gts='git tag --sign'
gtv='git tag | sort -V'
gunignore='git update-index --no-assume-unchanged'
gunwip='git rev-list --max-count=1 --format="%s" HEAD | grep -q "\--wip--" && git reset HEAD~1'
gwch='git whatchanged -p --abbrev-commit --pretty=medium'
gwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign --message "--wip-- [skip ci]"'
gwipe='git reset --hard && git clean --force -df'
gwt='git worktree'
gwta='git worktree add'
gwtls='git worktree list'
gwtmv='git worktree move'
gwtrm='git worktree remove'
hackzor='git init'
hitchhiker='fortune -a /Users/real/.local/share/sheldon/repos/github.com/ohmyzsh/ohmyzsh/plugins/hitchhiker/fortunes'
letcat='git checkout'
'mvn!'='mvn -f $(git rev-parse --show-toplevel 2>/dev/null || echo ".")/pom.xml'
oanward='git commit -m'
ooanward='git commit -am'
rulz='git push'
sgrep='grep -R -n -H -C 5 --exclude-dir={.git,.svn,CVS} '
violenz='git rebase'
yolo='git commit -m "$(curl -s https://whatthecommit.com/index.txt)"'
