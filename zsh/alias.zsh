case "$OSTYPE" in
    darwin*)
        (( ${+commands[gdate]} )) && abbr -S date='gdate'
        (( ${+commands[gls]} )) && abbr -S ls='gls --color=auto'
        (( ${+commands[gmkdir]} )) && abbr -S mkdir='gmkdir'
        (( ${+commands[gcp]} )) && abbr -S cp='gcp'
        (( ${+commands[gmv]} )) && abbr -S mv='gmv'
        (( ${+commands[grm]} )) && abbr -S rm='grm'
        (( ${+commands[gdu]} )) && abbr -S du='gdu'
        (( ${+commands[ghead]} )) && abbr -S head='ghead'
        (( ${+commands[gtail]} )) && abbr -S tail='gtail'
        (( ${+commands[gsed]} )) && abbr -S sed='gsed'
        (( ${+commands[ggrep]} )) && abbr -S grep='ggrep -n'
        (( ${+commands[gfind]} )) && abbr -S find='gfind'
        (( ${+commands[gdirname]} )) && abbr -S dirname='gdirname'
        (( ${+commands[gxargs]} )) && abbr -S xargs='gxargs'
    ;;
esac

abbr -S -g L='| less'
abbr -S -g G='| grep -n'
abbr -S ..='cd ..'
abbr -S l='ls -lh'
abbr -S lt='ls -ltr'
abbr -S la='ls -a'
abbr -S rm='rm -i'
abbr -S h='history'
abbr -S hh='history-all'
abbr -S op='open .'
abbr -S wget=wget --hsts-file="$XDG_DATA_HOME/wget-hsts"

abbr -S gs='git status'
abbr -S gl='git log --oneline'
abbr -S gln='git log --name-only'
abbr -S gd='git diff'
abbr -S gdn='git diff --name-only'
abbr -S gcm='git commit -m'
abbr -S ga='git add'
abbr -S gaa='git add --all'
abbr -S gam='git am'
abbr -S gama='git am --abort'
abbr -S gamc='git am --continue'
abbr -S gams='git am --skip'
abbr -S gamscp='git am --show-current-patch'
abbr -S gap='git apply'
abbr -S gapa='git add --patch'
abbr -S gapt='git apply --3way'
abbr -S gau='git add --update'
abbr -S gav='git add --verbose'
abbr -S gb='git branch'
abbr -S gbD='git branch --delete --force'
abbr -S gba='git branch --all'
abbr -S gbd='git branch --delete'
abbr -S gbg='LANG=C git branch -vv | grep ": gone\]"'
abbr -S gbgD='LANG=C git branch --no-color -vv | grep ": gone\]" | cut -c 3- | awk '\''{print $1}'\'' | xargs git branch -D'
abbr -S gbgd='LANG=C git branch --no-color -vv | grep ": gone\]" | cut -c 3- | awk '\''{print $1}'\'' | xargs git branch -d'
abbr -S gbl='git blame -w'
abbr -S gbm='git branch --move'
abbr -S gbnm='git branch --no-merged'
abbr -S gbr='git branch --remote'
abbr -S gbs='git bisect'
abbr -S gbsb='git bisect bad'
abbr -S gbsg='git bisect good'
abbr -S gbsn='git bisect new'
abbr -S gbso='git bisect old'
abbr -S gbsr='git bisect reset'
abbr -S gbss='git bisect start'
abbr -S gc='git commit --verbose'
abbr -S 'gc!'='git commit --verbose --amend'
abbr -S gcB='git checkout -B'
abbr -S gca='git commit --verbose --all'
abbr -S 'gca!'='git commit --verbose --all --amend'
abbr -S gcam='git commit --all --message'
abbr -S 'gcan!'='git commit --verbose --all --no-edit --amend'
abbr -S 'gcann!'='git commit --verbose --all --date=now --no-edit --amend'
abbr -S 'gcans!'='git commit --verbose --all --signoff --no-edit --amend'
abbr -S gcas='git commit --all --signoff'
abbr -S gcasm='git commit --all --signoff --message'
abbr -S gcb='git checkout -b'
abbr -S gcd='git checkout $(git config gitflow.branch.develop)'
abbr -S gcf='git config --list'
abbr -S gch='git checkout $(git config gitflow.prefix.hotfix)'
abbr -S gcl='git clone --recurse-submodules'
abbr -S gclean='git clean --interactive -d'
abbr -S gclf='git clone --recursive --shallow-submodules --filter=blob:none --also-filter-submodules'
abbr -S gcm='git checkout $(git_main_branch)'
abbr -S gcmsg='git commit --message'
abbr -S gcn='git commit --verbose --no-edit'
abbr -S 'gcn!'='git commit --verbose --no-edit --amend'
abbr -S gco='git checkout'
abbr -S gcor='git checkout --recurse-submodules'
abbr -S gcount='git shortlog --summary --numbered'
abbr -S gcr='git checkout $(git config gitflow.prefix.release)'
abbr -S gcs='git commit --gpg-sign'
abbr -S gcsm='git commit --signoff --message'
abbr -S gcss='git commit --gpg-sign --signoff'
abbr -S gcssm='git commit --gpg-sign --signoff --message'
abbr -S gd='git diff'
abbr -S gdca='git diff --cached'
abbr -S gdct='git describe --tags $(git rev-list --tags --max-count=1)'
abbr -S gdcw='git diff --cached --word-diff'
abbr -S gdn='git diff --name-only'
abbr -S gds='git diff --staged'
abbr -S gdt='git diff-tree --no-commit-id --name-only -r'
abbr -S gdup='git diff @{upstream}'
abbr -S gdw='git diff --word-diff'
abbr -S gf='git fetch'
abbr -S gfa='git fetch --all --tags --prune --jobs=10'
abbr -S gfg='git ls-files | grep'
abbr -S gfl='git flow'
abbr -S gflf='git flow feature'
abbr -S gflff='git flow feature finish'
abbr -S gflffc='git flow feature finish ${$(git_current_branch)#feature/}'
abbr -S gflfp='git flow feature publish'
abbr -S gflfpc='git flow feature publish ${$(git_current_branch)#feature/}'
abbr -S gflfpll='git flow feature pull'
abbr -S gflfs='git flow feature start'
abbr -S gflh='git flow hotfix'
abbr -S gflhf='git flow hotfix finish'
abbr -S gflhfc='git flow hotfix finish ${$(git_current_branch)#hotfix/}'
abbr -S gflhp='git flow hotfix publish'
abbr -S gflhpc='git flow hotfix publish ${$(git_current_branch)#hotfix/}'
abbr -S gflhs='git flow hotfix start'
abbr -S gfli='git flow init'
abbr -S gflr='git flow release'
abbr -S gflrf='git flow release finish'
abbr -S gflrfc='git flow release finish ${$(git_current_branch)#release/}'
abbr -S gflrp='git flow release publish'
abbr -S gflrpc='git flow release publish ${$(git_current_branch)#release/}'
abbr -S gflrs='git flow release start'
abbr -S gfo='git fetch origin'
abbr -S gg='git gui citool'
abbr -S gga='git gui citool --amend'
abbr -S ggpull='git pull origin "$(git_current_branch)"'
abbr -S ggpush='git push origin "$(git_current_branch)"'
abbr -S ggsup='git branch --set-upstream-to=origin/$(git_current_branch)'
abbr -S ghf='git hf'
abbr -S ghff='git hf feature'
abbr -S ghfh='git hf hotfix'
abbr -S ghfr='git hf release'
abbr -S ghfs='git hf support'
abbr -S ghfu='git hf update'
abbr -S ghh='git help'
abbr -S gignore='git update-index --assume-unchanged'
abbr -S gignored='git ls-files -v | grep "^[[:lower:]]"'
abbr -S git-svn-dcommit-push='git svn dcommit && git push github $(git_main_branch):svntrunk'
abbr -S github='web_search github'
abbr -S gk='\gitk --all --branches &!'
abbr -S gke='\gitk --all $(git log --walk-reflogs --pretty=%h) &!'
abbr -S gl='git pull'
abbr -S glfsi='git lfs install'
abbr -S glfsls='git lfs ls-files'
abbr -S glfsmi='git lfs migrate import --include='
abbr -S glfst='git lfs track'
abbr -S glg='git log --stat'
abbr -S glgg='git log --graph'
abbr -S glgga='git log --graph --decorate --all'
abbr -S glgm='git log --graph --max-count=10'
abbr -S glgp='git log --stat --patch'
abbr -S gln='git log --name-only'
abbr -S glo='git log --oneline --decorate'
abbr -S glod='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset"'
abbr -S glods='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset" --date=short'
abbr -S glog='git log --oneline --decorate --graph'
abbr -S gloga='git log --oneline --decorate --graph --all'
abbr -S glol='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset"'
abbr -S glola='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" --all'
abbr -S glols='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" --stat'
abbr -S glp=_git_log_prettily
abbr -S gluc='git pull upstream $(git_current_branch)'
abbr -S glum='git pull upstream $(git_main_branch)'
abbr -S gm='git merge'
abbr -S gma='git merge --abort'
abbr -S gmc='git merge --continue'
abbr -S gmff='git merge --ff-only'
abbr -S gmom='git merge origin/$(git_main_branch)'
abbr -S gms='git merge --squash'
abbr -S gmtl='git mergetool --no-prompt'
abbr -S gmtlvim='git mergetool --no-prompt --tool=vimdiff'
abbr -S gmum='git merge upstream/$(git_main_branch)'
abbr -S gp='git push'
abbr -S gpd='git push --dry-run'
abbr -S gpf='git push --force-with-lease --force-if-includes'
abbr -S 'gpf!'='git push --force'
abbr -S gpoat='git push origin --all && git push origin --tags'
abbr -S gpod='git push origin --delete'
abbr -S gpr='git pull --rebase'
abbr -S gpra='git pull --rebase --autostash'
abbr -S gprav='git pull --rebase --autostash -v'
abbr -S gpristine='git reset --hard && git clean --force -dfx'
abbr -S gprom='git pull --rebase origin $(git_main_branch)'
abbr -S gpromi='git pull --rebase=interactive origin $(git_main_branch)'
abbr -S gprum='git pull --rebase upstream $(git_main_branch)'
abbr -S gprumi='git pull --rebase=interactive upstream $(git_main_branch)'
abbr -S gprv='git pull --rebase -v'
abbr -S gpsup='git push --set-upstream origin $(git_current_branch)'
abbr -S gpsupf='git push --set-upstream origin $(git_current_branch) --force-with-lease --force-if-includes'
abbr -S gpu='git push upstream'
abbr -S gpv='git push --verbose'
abbr -S gr='git remote'
abbr -S gra='git remote add'
abbr -S grb='git rebase'
abbr -S grba='git rebase --abort'
abbr -S grbc='git rebase --continue'
abbr -S grbd='git rebase $(git_develop_branch)'
abbr -S grbi='git rebase --interactive'
abbr -S grbm='git rebase $(git_main_branch)'
abbr -S grbo='git rebase --onto'
abbr -S grbom='git rebase origin/$(git_main_branch)'
abbr -S grbs='git rebase --skip'
abbr -S grbum='git rebase upstream/$(git_main_branch)'
abbr -S grev='git revert'
abbr -S greva='git revert --abort'
abbr -S grevc='git revert --continue'
abbr -S grf='git reflog'
abbr -S grh='git reset'
abbr -S grhh='git reset --hard'
abbr -S grhk='git reset --keep'
abbr -S grhs='git reset --soft'
abbr -S grm='git rm'
abbr -S grmc='git rm --cached'
abbr -S grmv='git remote rename'
abbr -S groh='git reset origin/$(git_current_branch) --hard'
abbr -S grrm='git remote remove'
abbr -S grs='git restore'
abbr -S grset='git remote set-url'
abbr -S grss='git restore --source'
abbr -S grst='git restore --staged'
abbr -S grt='cd "$(git rev-parse --show-toplevel || echo .)"'
abbr -S gru='git reset --'
abbr -S grup='git remote update'
abbr -S grv='git remote --verbose'
abbr -S gs='git status'
abbr -S gsb='git status --short --branch'
abbr -S gsd='git svn dcommit'
abbr -S gsh='git show'
abbr -S gsi='git submodule init'
abbr -S gsps='git show --pretty=short --show-signature'
abbr -S gsr='git svn rebase'
abbr -S gss='git status --short'
abbr -S gst='git status'
abbr -S gsta='git stash push'
abbr -S gstaa='git stash apply'
abbr -S gstall='git stash --all'
abbr -S gstc='git stash clear'
abbr -S gstd='git stash drop'
abbr -S gstl='git stash list'
abbr -S gstp='git stash pop'
abbr -S gsts='git stash show --patch'
abbr -S gsu='git submodule update'
abbr -S gsw='git switch'
abbr -S gswc='git switch --create'
abbr -S gswd='git switch $(git_develop_branch)'
abbr -S gswm='git switch $(git_main_branch)'
abbr -S gta='git tag --annotate'
abbr -S gtl='gtl(){ git tag --sort=-v:refname -n --list "${1}*" }; noglob gtl'
abbr -S gts='git tag --sign'
abbr -S gtv='git tag | sort -V'
abbr -S gunignore='git update-index --no-assume-unchanged'
abbr -S gunwip='git rev-list --max-count=1 --format="%s" HEAD | grep -q "\--wip--" && git reset HEAD~1'
abbr -S gwch='git whatchanged -p --abbrev-commit --pretty=medium'
abbr -S gwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign --message "--wip-- [skip ci]"'
abbr -S gwipe='git reset --hard && git clean --force -df'
abbr -S gwt='git worktree'
abbr -S gwta='git worktree add'
abbr -S gwtls='git worktree list'
abbr -S gwtmv='git worktree move'
abbr -S gwtrm='git worktree remove'
